<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>com.open.capacity</groupId>
		<artifactId>business-center</artifactId>
		<version>1.0.1</version>
	</parent>
	<artifactId>user-center</artifactId>
	<!--
  ~
  ~  Copyright (c) 2018-2025, open-capacity-platform All rights reserved.
  ~
  ~  Redistribution and use in source and binary forms, with or without
  ~  modification, are permitted provided that the following conditions are met:
  ~
  ~ Redistributions of source code must retain the above copyright notice,
  ~  this list of conditions and the following disclaimer.
  ~  Redistributions in binary form must reproduce the above copyright
  ~  notice, this list of conditions and the following disclaimer in the
  ~  documentation and/or other materials provided with the distribution.
  ~  Neither the name of the open-capacity-platform developer nor the names of its
  ~  contributors may be used to endorse or promote products derived from
  ~  this software without specific prior written permission.
  ~  Author: owen gitgeek (624191343@qq.com)
  ~
-->
	<dependencies>


		<!-- 日志统一配置 -->
		<dependency>
			<groupId>com.open.capacity</groupId>
			<artifactId>log-core</artifactId>
			<version>${core.version}</version>
		</dependency>
		
		<!-- 公共实体类模块 -->
		<dependency>
			<groupId>com.open.capacity</groupId>
			<artifactId>api-commons</artifactId>
			<version>${core.version}</version>
		</dependency>
		<!-- 关系型和非关系型数据库配置 -->
		<dependency>
			<groupId>com.open.capacity</groupId>
			<artifactId>db-core</artifactId>
			<version>${core.version}</version>
		</dependency>

		<!-- 资源服务器 -->
		<dependency>
			<groupId>com.open.capacity</groupId>
			<artifactId>security-core</artifactId>
			<version>${core.version}</version>
		</dependency>

	

		<!-- grpc通信模块 -->
		<dependency>
			<groupId>com.open.capacity</groupId>
			<artifactId>grpc-lib</artifactId>
			<version>${core.version}</version>
		</dependency>
		
		
		<!-- swagger -->
		<dependency>
			<groupId>com.open.capacity</groupId>
			<artifactId>swagger-core</artifactId>
			<version>${core.version}</version>
		</dependency> 

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>


		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context-support</artifactId>
		</dependency>

	 
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
			<version>4.5.5</version>
		</dependency>


		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
		</dependency>
		<dependency>
			<groupId>commons-collections</groupId>
			<artifactId>commons-collections</artifactId>
			<version>3.2.2</version>
		</dependency>



		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<optional>true</optional>
		</dependency>

		

		<dependency>
            <groupId>net.devh</groupId>
            <artifactId>grpc-server-spring-boot-starter</artifactId>
            <version>${net-devh-grpc.version}</version>
        </dependency>

		<!--
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-zipkin</artifactId>
		</dependency>
		 -->
		 
		<!-- 选用eureka时打开-->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
		</dependency>
		 
	</dependencies>

	<!-- 形成带第三方jar包的可执行jar包，jar包目录结构如下 application.properties lib META-INF mybatis 
		org -->
	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>repackage</goal>
						</goals>
					</execution>
				</executions>
			</plugin>


			<!-- 首先加入pom ${docker.image.prefix} ： 这个是你的dockerhub注册上面的名字 gitgeek 这个是我注册的 
				${project.artifactId} ： 项目的名称 dockerDirectory ： dockerfile的文件路径 -->
			<plugin>
				<groupId>com.spotify</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>0.4.13</version>
				<configuration>
					<imageName>${docker.image.prefix}/${project.artifactId}</imageName>
					<dockerDirectory>src/main/docker</dockerDirectory>
					<dockerHost>${docker.host}</dockerHost>
					<resources>
						<resource>
							<targetPath>/</targetPath>
							<directory>${project.build.directory}</directory>
							<include>${project.build.finalName}.jar</include>
						</resource>
					</resources>
				</configuration>
			</plugin>

		</plugins>
		<finalName>${project.artifactId}</finalName>
	</build>


</project>